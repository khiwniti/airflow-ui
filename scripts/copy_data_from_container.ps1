# PowerShell script to copy data from Airflow container to localhost
# This script copies all data files generated by DAGs to the local data_output directory

Write-Host "üîÑ Copying data from Airflow container to localhost..." -ForegroundColor Cyan

# Check if container is running
$containerName = "synapes-analytics-airflow-scheduler-1"
$containerStatus = docker ps --filter "name=$containerName" --format "{{.Status}}"

if (-not $containerStatus) {
    Write-Host "‚ùå Container $containerName is not running!" -ForegroundColor Red
    Write-Host "Please start the Airflow services first with: docker-compose up -d" -ForegroundColor Yellow
    exit 1
}

Write-Host "‚úÖ Container $containerName is running" -ForegroundColor Green

# Create local data_output directory if it doesn't exist
if (-not (Test-Path "data_output")) {
    New-Item -ItemType Directory -Path "data_output" -Force | Out-Null
    Write-Host "üìÅ Created local data_output directory" -ForegroundColor Green
}

# Copy data from container to localhost
try {
    Write-Host "üì• Copying data files from container..." -ForegroundColor Yellow
    
    # Copy all files from container data_output to local data_output
    docker cp "${containerName}:/opt/airflow/data_output/." "./data_output/"
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Data files copied successfully!" -ForegroundColor Green
        
        # List the files that were copied
        $files = Get-ChildItem -Path "data_output" -File | Sort-Object LastWriteTime -Descending
        
        if ($files.Count -gt 0) {
            Write-Host "`nüìä Data files in localhost:" -ForegroundColor Cyan
            Write-Host "=" * 50 -ForegroundColor Gray
            
            foreach ($file in $files) {
                $size = [math]::Round($file.Length / 1KB, 2)
                $time = $file.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss")
                Write-Host "üìÑ $($file.Name) ($size KB) - $time" -ForegroundColor White
            }
            
            Write-Host "=" * 50 -ForegroundColor Gray
            Write-Host "üìà Total files: $($files.Count)" -ForegroundColor Green
            
            # Show summary by file type
            $jsonFiles = $files | Where-Object { $_.Extension -eq ".json" }
            $csvFiles = $files | Where-Object { $_.Extension -eq ".csv" }
            
            Write-Host "`nüìã File Summary:" -ForegroundColor Cyan
            Write-Host "   JSON files: $($jsonFiles.Count)" -ForegroundColor White
            Write-Host "   CSV files: $($csvFiles.Count)" -ForegroundColor White
            
            # Show latest files
            Write-Host "`nüïí Latest 5 files:" -ForegroundColor Cyan
            $files | Select-Object -First 5 | ForEach-Object {
                Write-Host "   ‚Ä¢ $($_.Name)" -ForegroundColor White
            }
            
        } else {
            Write-Host "‚ÑπÔ∏è No data files found in container" -ForegroundColor Yellow
            Write-Host "Run a DAG first to generate data files" -ForegroundColor Yellow
        }
        
    } else {
        Write-Host "‚ùå Failed to copy data files" -ForegroundColor Red
        exit 1
    }
    
} catch {
    Write-Host "‚ùå Error copying data: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

Write-Host "`nüéâ Data copy completed successfully!" -ForegroundColor Green
Write-Host "üíæ Data files are now available in: $(Resolve-Path 'data_output')" -ForegroundColor Cyan

# Optional: Show how to view the data
Write-Host "`nüí° Tips:" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ View JSON files: Get-Content data_output\*.json | ConvertFrom-Json" -ForegroundColor Gray
Write-Host "   ‚Ä¢ View CSV files: Import-Csv data_output\*.csv" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Monitor new files: Get-ChildItem data_output -File | Sort LastWriteTime -Desc" -ForegroundColor Gray
